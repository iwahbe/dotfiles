#!/usr/bin/env sh

# The script used to apply the config in this repository to the host computer and to
# remove the applied config from the host computer.
#
# To git started, you can run ./bin/config help

# make_link <src> <dst>
#
# Create a link between <src> and <dst>.
# <src> may be a directory.
# <dst> will not exist.
#
# You can override the command used by setting CONFIG_LINK_CMD.
make_link () {
    if [[ "" == "$CONFIG_LINK_CMD" ]]; then
	echo "Linking $1 to $2: done"
	ln -s -w $1 $2
    else
	$CONFIG_LINK_CMD $1 $2
    fi
}

# unmake_link <src> <dst>
#
# Remove an existing link from <src> to <dst>.
#
# You can override the command used by setting CONFIG_UNLINK_CMD.
unmake_link() {
    if [[ "" == "$CONFIG_UNLINK_CMD" ]]; then
	echo "Unlinking $1 from $2: done"
	rm $2
    else
	$CONFIG_UNLINK_CMD $1 $2
    fi
}

# skip_link <src> <dst>
#
# Skip linking from <src> to <dst> because <dst> already exists.
skip_link() {
    # echo "skiping linking $1 to $2"
    true # Necessary because empty functions are not allowed in sh scripts.
}

SRC_DEFAULT_DIR="$PWD/home" # This is chosen so running bin/config up "just works"

DST_DEFAULT_DIR="$HOME"

read -r -d '' HELP <<- EOF
	config [up|down|init] [src=$SRC_DEFAULT_DIR] [dst=$DST_DEFAULT_DIR]

	Recursivly link src to dst. Effert is made to make the minimum number of links.
	That means that directories are linked if possible, otherwise their content is recursed.

	Files in dst are prioritized over files in src.

	Both src and dst must be directories.
EOF

SRC_DIR=$2
DST_DIR=$3

if [[ "$SRC_DIR" == "" ]]; then
    # If the source directory is empty, apply the default.
    SRC_DIR="$SRC_DEFAULT_DIR"
elif [[ ! "$SRC_DIR" == /* ]]; then
    # If the source directory doesn't start with a slash, prefix it with the current
    # directory
    SRC_DIR="$PWD/$SRC_DIR"
fi

if [[ "$DST_DIR" == "" ]]; then
    DST_DIR="$DST_DEFAULT_DIR"
elif [[ ! "$DST_DIR" == /* ]]; then
     # If a relative directory was given, set it relative to the current directory.
     DST_DIR="$PWD/$DST_DIR"
fi

if [[ ! -d "$SRC_DIR" ]]; then
    echo "'$SRC_DIR' is not a directory"
    echo
    echo "$HELP"
    exit 1
fi

if [[ ! -d "$DST_DIR" ]]; then
    echo "'$DST_DIR' is not a directory"
    echo
    echo "$HELP"
    exit 1
fi

# stand_up <path>
stand_up () {
    if [[ ! -e "$DST_DIR/$1" ]] && [[ ! -L "$DST_DIR/$1" ]]; then
	# dst doesn't exist, so link the entry.  This can be either a file or a
	# directory.
	make_link "$SRC_DIR/$1" "$DST_DIR/$1"
    elif [[ -d "$DST_DIR/$1" ]] && [[ -d "$SRC_DIR/$1" ]]; then
	# The dst directory exists,
	for entry in $('ls' -a "$SRC_DIR/$1"); do
	    if [[ "$entry" == "." ]] || [[ "$entry" == ".." ]]; then
		true # do nothing here
	    elif [[ "$1" == "" ]]; then
		stand_up "$entry"
	    else
		stand_up "$1/$entry"
            fi
	done
    elif [[ -L "$DST_DIR/$1" ]] && [[ "$(readlink $DST_DIR/$1)" == "$SRC_DIR/$1" ]]; then
	echo "Linking $DST_DIR/$1: already linked"
    else
	# We can't recurse down directories, so we give up
	skip_link "$SRC_DIR/$1" "$DST_DIR/$1"
    fi
}

# tear_down <path>
tear_down () {
    if [[ -L "$DST_DIR/$1" ]] && [[ "$(readlink $DST_DIR/$1)" == "$SRC_DIR/$1" ]]; then
	# Its a link to the file in our tree
	unmake_link "$SRC_DIR/$1" "$DST_DIR/$1"
    elif [[ -d "$DST_DIR/$1" ]] && [[ -d "$SRC_DIR/$1" ]]; then
	# The dst directory exists,
	for entry in $('ls' -a "$SRC_DIR/$1"); do
	    if [[ "$entry" == "." ]] || [[ "$entry" == ".." ]]; then
		true # do nothing here
	    elif [[ "$1" == "" ]]; then
		tear_down "$entry"
	    else
		tear_down "$1/$entry"
	    fi
	done
    fi
}

USER_LOCAL_PATH="$PWD/.local"
USER_DATA_PATH="$USER_LOCAL_PATH/user-data.sh"
USER_IDENTITY_PATH="$USER_LOCAL_PATH/identity.sh"

ensure_initialized () {
    if [ -f $USER_DATA_PATH ]; then
        source "$USER_DATA_PATH"
    else
        echo "Please run '$0 init' before attempting to link in files."
        exit 1
    fi
}

# Apply the identity filter.
# $1 is the direction, either "clean" or "smudge".
apply_identity () {
    if ! [[ -f $USER_IDENTITY_PATH ]]; then
       echo "internal error: Missing identity filter"
       exit 1
    fi

    for file in $(find home -type f); do
        content=$(cat "$file")

        # Because the shell does funny things with newlines, we manually check if the
        # newline exists and re-apply it if it does.
        if [[ $(tail -c1 "$file" | wc -l) -gt 0 ]]; then
           eof="\n"
        else
           eof=''
        fi

        printf '%s' "$content" | $USER_IDENTITY_PATH $1 > $file
        if [[ "$eof" == "\n" ]]; then
           printf "$eof" >> $file
        fi

        # `git status` still shows changed files as "dirty", even when `git diff` shows
        # them as clean. We add such files to `git status` comes up clean as expected.
        if [[ "$(git diff $file)" = "" ]]; then
           git add $file
        fi
    done
}

case $1 in
    up)
        ensure_initialized
	stand_up ""
	;;
    down)
	tear_down ""
	;;
    init)
        read -p 'What is your full name (example "Jane Smith")? ' USER_NAME
        read -p 'What is your email address? ' USER_EMAIL

        # If the user has already set this up, remove the previous identity so the new
        # identity applies cleanly.
        if [[ -f $USER_IDENTITY_PATH ]]; then
           apply_identity clean
        fi

        mkdir -p $USER_LOCAL_PATH
        cat<<-EOF > $USER_DATA_PATH
# This file is generated by $0. Only edit if you know what you are doing.
USER_NAME="$USER_NAME"
USER_EMAIL="$USER_EMAIL"
EOF
        cat<<-EOF > $USER_IDENTITY_PATH
#!/usr/bin/env sh

# The script used as a git filter to remove user data from the checked in repository.

case \$1 in
     clean)
        sed 's/$USER_NAME/USER_NAME/g' | sed 's/$USER_EMAIL/USER_EMAIL/g'
        ;;
     smudge)
        sed 's/USER_NAME/$USER_NAME/g' | sed 's/USER_EMAIL/$USER_EMAIL/g'
        ;;
     *)
        echo "Unknown command \\\"\$1\\\""
        exit 1
        ;;
esac
EOF
        chmod u+x $USER_IDENTITY_PATH

        # Reset existing identity filter, if any
        git config --unset-all filter.identity.clean
        git config --unset-all filter.identity.smudge

        # Apply newly generated identity filter
        git config filter.identity.clean  "$USER_IDENTITY_PATH clean"
        git config filter.identity.smudge "$USER_IDENTITY_PATH smudge"

        # Now apply the identity filter we have just created manually
        apply_identity smudge
        ;;
    *)
	echo "Unknown command \"$1\""
	echo ""
	echo "$HELP"
	;;
esac
