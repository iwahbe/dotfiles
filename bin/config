#!/usr/bin/env sh

set -eu -o pipefail # Exit on pipe failure

# The script used to apply the config in this repository to the host computer and to
# remove the applied config from the host computer.
#
# To git started, you can run ./bin/config help

SRC_DEFAULT_DIR="$PWD/home" # This is chosen so running bin/config up "just works"

DST_DEFAULT_DIR="$HOME"

HELP=$(cat <<-EOF
	config <up|down> [src=$SRC_DEFAULT_DIR] [dst=$DST_DEFAULT_DIR]

	Recursivly link src to dst. Effert is made to make the minimum number of links.
	That means that directories are linked if possible, otherwise their content is
	recursed.

	Files in dst are prioritized over files in src.

	Both src and dst must be directories.
EOF
    )

SRC_DIR="${2-$SRC_DEFAULT_DIR}"
if [[ ! "$SRC_DIR" == /* ]]; then
    # If the source directory doesn't start with a slash, prefix it with the current
    # directory
    SRC_DIR="$PWD/$SRC_DIR"
fi

DST_DIR="${3-$DST_DEFAULT_DIR}"
if [[ ! "$DST_DIR" == /* ]]; then
    # If a relative directory was given, set it relative to the current directory.
    DST_DIR="$PWD/$DST_DIR"
fi

if ! [ -d "$SRC_DIR" ]; then
    echo "'$SRC_DIR' is not a directory"
    echo
    echo "$HELP"
    exit 1
fi

if ! [ -d "$DST_DIR" ]; then
    echo "'$DST_DIR' is not a directory"
    echo
    echo "$HELP"
    exit 1
fi

# indent_to <depth> <item>
#
# Print tree characters to look like:
#
# |-- top_level/         # indent_to 0 "top_level/"
# |   |-- second         # indent_to 1 "second"
# |-- third/             # indent_to 0 "third/"
# |   |-- fourth         # indent_to 1 "fourth"
# |   |-- counting/      # indent_to 1 "counting/"
# |   |   |-- is/        # indent_to 2 "is/"
# |   |   |   |-- hard   # indent_to 3 "hard"
indent_to () {
    one_less=$(( $1 - 1 ))
    while [ $one_less -gt 0 ]; do
        one_less=$(( one_less - 1 ))
        printf "|   "
    done
    printf "|-- %s\n" "$2"
}

# traverse_directory <helper: fn(path, depth)->should_recurse> <path> <depth>
#
# <helper> is intentionally not quoted when it is called, allowing users to pass in a
# function and initial arguments. This is valid:
#
#     traverse_directory "helper initial_arg" $path $depth
#
# When "helper" is called, $1 will be "initial_arg".
traverse_directory () {
    # $3 (depth) is optional, so we replace it with ${3-0} which means $3 with default
    # value "0".
    if eval "$1 \"$2\" \"${3-0}\""; then
        for entry in $('ls' -a "$SRC_DIR/$2"); do
	    if [ "$entry" = "." ] || [ "$entry" = ".." ]; then
                continue
	    elif [ "$2" = "" ]; then
		traverse_directory  "$1" "$entry" $(( ${3-0} + 1 ))
	    else
		traverse_directory "$1" "$2/$entry" $(( ${3-0} + 1 ))
            fi
	done
    fi
}

# stand_up <command> <path> <depth>
#
# <command> is itself a function that actually performs the linking.
# It takes as arguments:
#   <base>  : The path segment we are looking at
#   <src>   : The path to the source
#   <dst>   : The path to the destination
#   <depth> : The depth in the tree
#   <kind>  : The kind of operation we expect: [~|+|n|-]
#             ~ means already linked, so no op
#             + means link
#             n no applicable operation
#             - remove link
stand_up () {
    if [ ! -e "$DST_DIR/$2" ] && [ ! -L "$DST_DIR/$2" ]; then
	# dst doesn't exist, so link the entry.  This can be either a file or a
	# directory.
	$1 "$2" "$SRC_DIR/$2" "$DST_DIR/$2" "$3" +
    elif [ -L "$DST_DIR/$2" ] && [ "$(readlink "$DST_DIR/$2")" = "$SRC_DIR/$2" ]; then
        $1 "$2" "$SRC_DIR/$2" "$DST_DIR/$2" "$3" '~'
    elif [ -d "$DST_DIR/$2" ] && [ -d "$SRC_DIR/$2" ]; then
        $1 "$2" "$SRC_DIR/$2" "$DST_DIR/$2" "$3" n
	return 0 # Recurse
    fi
    return 1 # Don't recurse
}

# make_link <base> <src> <dst> <depth> <kind>
#
# A potential argument for stand_up_helper
make_link () {
    if [ "$5" = '+' ]; then
        echo "Linking $1 to $3"
        if ! ln -s -w "$2" "$3"; then
            echo "Failed to link $2 to $3"
        fi
    elif [ "$5" = '-' ]; then
        echo "Removing $3"
        rm "$3"
    fi
}

# preview_make_link <base> <src> <dst> <depth> <kind>
#
# A potential argument for stand_up_helper
preview_make_link () {
    display_name="$(basename "$1")"
    if [ -d "$SRC_DIR/$1" ]; then
        display_name="$display_name/"
    fi

    if [ "$1" = "" ]; then
        echo "$SRC_DIR/ -> $DST_DIR/"
    elif [ "$5" = n ]; then
        indent_to "$4" "$display_name"
    else
        indent_to "$4" "$display_name @ $5"
    fi
}

# tear_down <command> <path> <depth>
#
# <command> takes the same arguments as it does in stand_up
tear_down () {
    if [ -L "$DST_DIR/$2" ] && [ "$(readlink "$DST_DIR/$2")" = "$SRC_DIR/$2" ]; then
	# Its a link to the file in our tree
	$1 "$2" "$SRC_DIR/$1" "$DST_DIR/$2" "$3" -
    elif [ -d "$DST_DIR/$2" ] && [ -d "$SRC_DIR/$2" ]; then
	# The dst directory exists, but not as a link. We recurse
	$1 "$2" "$SRC_DIR/$1" "$DST_DIR/$2" "$3" n
        return 0
    fi
    return 1
}

confirm () {
    while true; do
        printf 'Are you sure? '
        read -r yn
        case $yn in
            [Yy]* ) return 0;;
            [Nn]* ) return 1;;
            * ) echo "Please answer yes or no.";;
        esac
    done
}



if [ "$#" -eq 0 ]; then
    echo "$HELP"
fi

case $1 in
    up)
        traverse_directory "stand_up preview_make_link" "" | column -t -s @

        if confirm; then
            traverse_directory "stand_up make_link" ""
        else
            echo "Canceled"
        fi
	;;
    down)
	traverse_directory "tear_down preview_make_link" "" | column -t -s @

        if confirm; then
            traverse_directory "tear_down make_link" ""
        else
            echo "Canceled"
        fi
	;;
    *)
	echo "Unknown command \"$1\""
	echo ""
	echo "$HELP"
	;;
esac
